<!DOCTYPE html>
<html lang="ar">

<head>

    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- SEO -->
    <meta name="keywords" content="Hassan , HTML , CSS , JavaScript , space , astronomy , Space Youth Forum , HR , Nasa Egypt , Nasa , Space Egyption Agency , اتحاد شباب الفضاء , علم الفلك , الفضاء , عجائب الفضاء">
    <meta name="auther" content="Hassan Space Youth Forum">
    <meta name="theme-color" content="#26b0ff">
    <meta name="robots" content="index,follow">

    <!-- Css Files  -->
    <link rel="stylesheet" href="normalize.css">
    <link rel="stylesheet" href="Events.css">
    <link rel="stylesheet" href="animation.css">

    <!-- Logo for the website -->
    <link rel="icon" href="image/logo.ico">
    <link rel="apple-touch-icon" href="image/logo.ico">
    <link rel="apple-touch-icon-precomposed" href="image/logo.ico">
    <link rel="shortcut icon" href="image/logo.ico">
    <!-- Font awesome -->
    <script src="https://kit.fontawesome.com/fa3c9a78d2.js" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

    <!-- Font Links  -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&family=Aref+Ruqaa&family=Cinzel+Decorative:wght@400;700&family=Markazi+Text&family=Quintessential&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@400;700&display=swap" rel="stylesheet">
    <title>Space Mission</title>
</head>

<body>

    <!-- Start header  -->
    <header>
        <div class="contener">
            <div class="logo">
                <a href="https://syfederation-c2b24.web.app/index.html"><img src="image/Logo.png" alt="logo"></a>
                <h1 class="title-h1">Space Youth Forum</h1>
            </div>
            <div class="navegation">
                <nav>
                    <div class="i" id="listLogo" onclick="block()">
                        <span class="i1"></span>
                        <span class="i2"></span>
                        <span class="i3"></span>
                    </div>
                    <ul id="listUl">
                        <li><a href="/Home">الرئيسة</a></li>
                        <li><a href="/Topics">المواضيع</a></li>
                        <li><a href="/Challenges">التحديات</a></li>
                        <li><a href="/Top">المتصدرين</a></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>
    <!-- End header -->

    <!-- Loading page  -->
    <div id="loadingPage">
        <div class="space">
            <div class="f-circle"></div>
            <div class="s-circle"></div>
            <div class="t-circle"></div>
            <div class="circle"></div>
        </div>
    </div>

    <script type="module">
        import * as THREE from 'https://threejs.org/build/three.module.js';

        // Constants
        const SUN_RADIUS = 3.0;
        const PLANET_RADIUS = [0.4, 0.9, 1.0, 1.05, 2, 1.5, 1.3];
        const PLANET_DISTANCE = [5, 8, 11, 16, 26, 32, 38];
        const PLANET_PERIOD = [0.24, 0.62, 1.0, 1.88, 11.86, 29.46, 84.07];
        const PLANET_SMA = [2.5, 5.0, 7.5, 10.0, 15.0, 20.0, 25.0]; // Semi-Major Axis
        const PLANET_ECC = [0.1, 0.2, 0.01, 0.1, 0.05, 0.1, 0.3]; // Eccentricity
        const PLANET_INC = [5, 10, 0, 7, 1, 2, 3]; // Inclination
        const PLANET_COLORS = [
            0xFDB813, // Mercury
            0xE5E5E5, // Venus
            0x007BFF, // Earth
            0xE57E13, // Mars
            0xE5D6AA, // Jupiter
            0xE5E5E5, // Saturn
            0x66A1D2  // Uranus
        ];

        // Set up scene
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
        camera.position.z = 160;

        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Generate star positions
        const numStars = 1000;
        const starPositions = Array.from({ length: numStars }, () => new THREE.Vector3(
            Math.random() * 200 - 100,
            Math.random() * 200 - 100,
            Math.random() * 200 - 100
        ));

        // Function to draw stars in the background
        function drawStars() {
            const starGeometry = new THREE.SphereGeometry(0.1, 5, 5);
            const starMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFFFF });

            starPositions.forEach(position => {
                const star = new THREE.Mesh(starGeometry, starMaterial);
                star.position.copy(position);
                scene.add(star);
            });
        }

        // Draw the sun
        const sunGeometry = new THREE.SphereGeometry(SUN_RADIUS, 100, 100);
        const sunMaterial = new THREE.MeshBasicMaterial({ color: 0xFFFF00 });
        const sun = new THREE.Mesh(sunGeometry, sunMaterial);
        scene.add(sun);

        // Draw orbits and planets
        const orbits = PLANET_RADIUS.map((_, index) => {
            const points = [];
            const segments = 64;
            for (let i = 0; i <= segments; i++) {
                const theta = (i / segments) * Math.PI * 2;
                const x = PLANET_DISTANCE[index] * Math.cos(theta);
                const y = PLANET_DISTANCE[index] * Math.sin(theta);
                points.push(new THREE.Vector3(x, y, 0));
            }

            const orbitGeometry = new THREE.BufferGeometry().setFromPoints(points);
            const orbitMaterial = new THREE.LineDashedMaterial({ color: 0xFFFFFF, opacity: 0.5, transparent: true, dashSize: 0.5, gapSize: 0.5 });
            const orbit = new THREE.LineLoop(orbitGeometry, orbitMaterial);
            scene.add(orbit);
            return orbit;
        });

        const planetGeometries = PLANET_RADIUS.map(radius => new THREE.SphereGeometry(radius, 100, 100));

        const planets = PLANET_RADIUS.map((radius, index) => {
            const planetMaterial = new THREE.MeshBasicMaterial({ color: PLANET_COLORS[index] });
            const planet = new THREE.Mesh(planetGeometries[index], planetMaterial);
            scene.add(planet);
            return planet;
        });

        // Input range for controlling the period
        const periodInput = document.createElement('input');
        periodInput.type = 'range';
        periodInput.min = '0.01';
        periodInput.max = '20.0';
        periodInput.step = '0.1';
        periodInput.value = '10.0';

        // Touch variables
        let touchStartDistance = 0;

        // Main animation loop
        function animate() {
            requestAnimationFrame(animate);

            // Update planet positions and orbits
            const time = Date.now() * 0.001;
            const periodMultiplier = parseFloat(periodInput.value);
            planets.forEach((planet, index) => {
                const distance = PLANET_DISTANCE[index];
                const period = PLANET_PERIOD[index] * periodMultiplier * 10; // Convert to milliseconds
                const velocity = 1.0; // Adjust velocity as needed

                const angle = (360.0 * time) / period + velocity;
                const x = distance * Math.cos(THREE.MathUtils.degToRad(angle));
                const y = distance * Math.sin(THREE.MathUtils.degToRad(angle));
                planet.position.set(x, y, 0);

                // Update orbit position relative to the sun
                orbits[index].position.set(0, 0, 0); // Orbits are centered at (0, 0, 0)
                orbits[index].rotation.z = THREE.MathUtils.degToRad(angle);
            });

            renderer.render(scene, camera);
        }

        // Event listeners
        let isPointerDown = false;
        let previousPointerPosition = { x: 0, y: 0 };

        window.addEventListener('pointerdown', (event) => {
            isPointerDown = true;
            previousPointerPosition = { x: event.clientX, y: event.clientY };
        });

        window.addEventListener('pointerup', () => {
            isPointerDown = false;
        });

        window.addEventListener('pointermove', (event) => {
            if (isPointerDown) {
                const deltaX = event.clientX - previousPointerPosition.x;
                const deltaY = event.clientY - previousPointerPosition.y;

                const rotationSpeed = 0.005;
                scene.rotation.y += deltaX * rotationSpeed;
                scene.rotation.x += deltaY * rotationSpeed;

                previousPointerPosition = { x: event.clientX, y: event.clientY };
            }
        });

        window.addEventListener('wheel', (event) => {
            camera.position.z += event.deltaY * 0.1;
        });

        window.addEventListener('touchstart', (event) => {
            if (event.touches.length === 2) {
                touchStartDistance = Math.hypot(
                    event.touches[0].clientX - event.touches[1].clientX,
                    event.touches[0].clientY - event.touches[1].clientY
                );
            }
        });

        window.addEventListener('touchmove', (event) => {
            if (event.touches.length === 2) {
                const touchCurrentDistance = Math.hypot(
                    event.touches[0].clientX - event.touches[1].clientX,
                    event.touches[0].clientY - event.touches[1].clientY
                );

                const deltaDistance = touchCurrentDistance - touchStartDistance;

                camera.position.z -= deltaDistance * 0.05;
                touchStartDistance = touchCurrentDistance;
            }
        });

        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });

        // Position the input range
        periodInput.style.position = 'absolute';
        periodInput.style.bottom = '10px';
        periodInput.style.left = '50%';
        periodInput.style.transform = 'translate(-50% , 0)'

        document.body.appendChild(periodInput);

        // Draw stars in the background
        drawStars();

        animate();
    </script>


    
    <!-- Start Conter-Event -->
    
    <!-- Start Conter-Event -->


    
    <script>

         // +++++++++++++ for List Nav +++++++++++++++++
        
         function block() {
            let click = document.getElementById('listLogo')
            click.onclick = function () {
                document.getElementById('listUl').classList.toggle('show');
                document.querySelectorAll('nav span').forEach(span => span.classList.toggle('span'))
            }
            document.getElementById('listUl').onclick = function () {
                document.getElementById('listUl').classList.toggle('show')
                document.querySelectorAll('nav span').forEach(span => span.classList.toggle('span'))
            }
        }
        
        // ++++++++++++++++++++ Loading Page ++++++++++++++++++++++++
        window.onload = () => {
            let LoadingPage = document.querySelector('#loadingPage')
        
            LoadingPage.style.opacity = '1'
            LoadingPage.style.display = 'flex' 
            document.body.style.overflow = 'hidden'
        
            setTimeout(() => {
                document.body.style.overflow = 'auto'
                LoadingPage.style.opacity = '0'        
            }, 3000);
        
            setTimeout(() => {
                LoadingPage.style.display = 'none'
            }, 4000);
        
        }
        
        // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
        let copyright = document.querySelector('.copyright .end-text p')
        
        let year = new Date()
        
        copyright.innerHTML =` &copy; Copyright ${year.getFullYear()} SYF`

        

    </script>
      
    
</body>
</html>